BIN_DIR=$(PWD)/tmp/bin
VERSION_PACKAGE := {{module_name}}/internal/version
VERSION ?= $(shell git describe --long --always --abbrev=15)
COMMIT ?= $(shell git describe --dirty --long --always --abbrev=15)
BUILD_DATE ?= $(shell date -u +"%Y-%m-%dT%H:%M:%SZ")
VERSION ?= "latest"

LDFLAGS_COMMON := "-X $(VERSION_PACKAGE).GitCommit=$(COMMIT) -X $(VERSION_PACKAGE).Version=$(VERSION) -X $(VERSION_PACKAGE).BuildDate=$(BUILD_DATE)"

.PHONY: help
help:
	@echo "üõ†Ô∏è Dev Commands\n"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

.PHONY: install-tools
install-tools: ## Install static checkers & other binaries
	@echo "üöö Downloading tools.."
	@GOBIN=$(BIN_DIR) go install mvdan.cc/gofumpt@latest
	@GOBIN=$(BIN_DIR) go install github.com/air-verse/air@latest
	@GOBIN=$(BIN_DIR) go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
	@GOBIN=$(BIN_DIR) go install github.com/g4s8/envdoc@latest
	@GOBIN=$(BIN_DIR) go install github.com/denis-tingaikin/go-header/cmd/go-header@latest

.PHONY: lint
lint: install-tools ## Lint the source code
	@echo "üßπ Cleaning go.mod.."
	@go mod tidy
	@echo "üßπ Formatting files.."
	@go fmt ./...
	@$(BIN_DIR)/gofumpt -l -w .
	@echo "üßπ Vetting go.mod.."
	@go vet ./...
	@echo "üßπ GoCI Lint.."
	@$(BIN_DIR)/golangci-lint run ./...

.PHONY: run
run: ## Run Frens
	@go run -ldflags $(LDFLAGS_COMMON) main.go -- $(filter-out $@,$(MAKECMDGOALS))

.PHONY: build
build: ## Build Frens
	@echo "üî®Building binary.."
	@echo "Version: $(VERSION)"
	@echo "Commit: $(COMMIT)"
	@echo "Build Date: $(BUILD_DATE)"
	@go build -ldflags $(LDFLAGS_COMMON) -o ./dist/{{project_name}};

.PHONY: gen
gen: ## Generate Go code
	@go generate ./...

.PHONY: gen-check
gen-check: gen ## Check if Go code needs to be generated
	@git diff --exit-code

.PHONY: test
test: ## Run tests
	@go test -v -count=1 -race -shuffle=on -coverprofile=coverage.txt ./...
