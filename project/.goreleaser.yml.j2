project_name: {{project_name}}

before:
  hooks:
    - go generate

builds:
  - binary: {{project_name}}
    env:
      - CGO_ENABLED=0
    ldflags:
      - -s -w -X {{module_name}}/internal/version.Version={% raw %}{{.Tag}}{% endraw %} -X {{module_name}}/internal/version.GitCommit={% raw %}{{.ShortCommit}}{% endraw %} -X {{module_name}}/internal/version.BuildDate={% raw %}{{.Date}}{% endraw %}
    goos:
      - linux
      - darwin
      - freebsd
      - openbsd
      - windows
    goarch:
      - amd64
      - arm
      - arm64
      - ppc64le
      - s390x
      - riscv64
    goarm:
      - '7'
      - '6'
    ignore:
      - goos: darwin
        goarch: '386'
      - goos: openbsd
        goarch: arm
      - goos: openbsd
        goarch: arm64
      - goos: freebsd
        goarch: arm
      - goos: freebsd
        goarch: arm64
      - goos: windows
        goarch: arm

changelog:
  use: github
  sort: asc
  abbrev: -1
  filters:
    exclude:
      - '^docs:'
      - '^test:'
  groups:
    - title: 'Breaking changes'
      regexp: '^.*?(\([[:word:]]+\))??!:.+$'
      order: 0
    - title: 'Enhancements'
      regexp: '^.*?feat(\([[:word:]]+\))??!?:.+$'
      order: 1
    - title: 'Fixes'
      regexp: '^.*?fix(\([[:word:]]+\))??!?:.+$'
      order: 2
    - title: 'Internal'
      regexp: '^.+$'
      order: 999

archives:
  - id: {{project_name}}
    {% raw %}name_template: '{{ .ProjectName }}_v{{ .Tag }}_{{ .Os }}_{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}'{% endraw %}
    format: tar.gz
    format_overrides:
      - goos: windows
        format: zip
    files:
      - LICENSE
      - CHANGELOG.md

checksum:
  name_template: {% raw %}"{{ .ProjectName }}_v{{ .Version }}_checksums.txt"{% endraw %}

release:
  # If set to true, will not auto-publish the release.
  # Available only for GitHub and Gitea.
  draft: true

  # Whether to remove existing draft releases with the same name before creating
  # a new one.
  # Only effective if `draft` is set to true.
  # Available only for GitHub.
  #
  # Since: v1.11
  replace_existing_draft: true

  # Useful if you want to delay the creation of the tag in the remote.
  # You can create the tag locally, but not push it, and run GoReleaser.
  # It'll then set the `target_commitish` portion of the GitHub release to the
  # value of this field.
  # Only works on GitHub.
  #
  # Default: ''
  # Since: v1.11
  # Templates: allowed
  target_commitish: {% raw %}"{{ .Commit }}"{% endraw %}

  # If set, will create a release discussion in the category specified.
  #
  # Warning: do not use categories in the 'Announcement' format.
  #  Check https://github.com/goreleaser/goreleaser/issues/2304 for more info.
  #
  # Default is empty.
  discussion_category_name: Releases

  # If set to auto, will mark the release as not ready for production
  # in case there is an indicator for this in the tag e.g. v1.0.0-rc1
  # If set to true, will mark the release as not ready for production.
  # Default is false.
  prerelease: auto

  # If set to false, will NOT mark the release as "latest".
  # This prevents it from being shown at the top of the release list,
  # and from being returned when calling https://api.github.com/repos/OWNER/REPO/releases/latest.
  #
  # Available only for GitHub.
  #
  # Default is true.
  # Since: v1.20
  make_latest: true

  # What to do with the release notes in case there the release already exists.
  #
  # Valid options are:
  # - `keep-existing`: keep the existing notes
  # - `append`: append the current release notes to the existing notes
  # - `prepend`: prepend the current release notes to the existing notes
  # - `replace`: replace existing notes
  #
  # Default is `keep-existing`.
  mode: append

  # You can change the name of the release.
  #
  # Templates: allowed
  name_template: {% raw %}"v{{.Version}}"{% endraw %}
